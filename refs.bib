@book{harper:pfpl,
  author    = {Robert Harper},
  title     = {Practical Foundations for Programming Languages (2nd. Ed.)},
  publisher = {Cambridge University Press},
  year      = {2016},
  url       = {https://www.cs.cmu.edu/\%7Erwh/pfpl/index.html},
  isbn      = {9781107150300},
  timestamp = {Fri, 22 May 2020 01:00:00 +0200},
  biburl    = {https://dblp.org/rec/books/cu/Ha2016.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{bahr:2015,
        author = "Patrick Bahr and Graham Hutton",
        title = "{Calculating Correct Compilers}",
        journal = "Journal of Functional Programming",
        publisher = "Cambridge University Press",
        volume = 25,
        month = sep,
        year = 2015}
@article{pickard:2021,
        author = "Mitchell Pickard and Graham Hutton",
        title = "{Calculating Dependently-Typed Compilers}",
        journal = "Proceedings of the ACM on Programming Languages",
        volume = 5,
        number = {ICFP},
        articleno = 82,
        month = aug,
        year = 2021}
@phdthesis{rouvoet:2021,
title = "Correct by Construction Language Implementations",
abstract = "Programming language implementations bridge the gap between what the program developer sees and understands, and what the computer executes. Hence, it is crucial for the reliability of software that language implementations are correct. Correctness of an implementation is judged with respect to a criterion. In this thesis, we focus on the criterion type correctness, striking a balance between the difficulty of the assessment of the criterion and its usefulness to rule out errors throughout a programming language implementation. If both the front- and the back-end fulfill their role in maintaining the type contract between the programmer and the language implementation, then unexpected type errors will not occur when the program is executed. To verify type correctness throughout a language implementation, we want to establish it formally. That is, we aim to give a specification of program typing in a formal language, and to give a mathematical proof that every part of the language implementation satisfies the necessary property to make the whole implementation type-correct. Type checkers ought to be sound and only accept programs that are indeed typeable according to the specification of the language. Interpreters should be type safe, and reduce expressions to values of the same type. Program compilers should preserve well-typing when they transform programs. These properties are essential for implementations of typed programming languages, ensuring that the typing of the source program is a meaningful notion that can be trusted by the programmer to prevent certain errors from occurring during program execution. A conventional formal type- ",
author = "A.J. Rouvoet",
year = "2021",
doi = "10.4233/uuid:f0312839-3444-41ee-9313-b07b21b59c11",
language = "English",
isbn = "978-94-6384-256-3",
school = "Delft University of Technology",
}
@inproceedings{pardoetal:2018,
author = {Pardo, Alberto and Gunther, Emmanuel and Pagano, Miguel and Viera, Marcos},
year = {2018},
month = {09},
pages = {1-12},
title = {An Internalist Approach to Correct-by-Construction Compilers},
doi = {10.1145/3236950.3236965}
}
